tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/main/custom_types.yaml

description: Deploy a Ophidia Cluster (on CentOS 7)

metadata:
  version: "1.0.0"
  display_name: Deploy a Ophidia cluster
  icon: images/ophidia.png
  tag: deprecated
  tag_color: grey

topology_template:
  inputs:
    fe_number_cpus:
      type: integer
      description: number of cpus required for the server instance
      default: 8
      constraints:
      - valid_values: [ 8, 16, 32, 64, 1, 2, 4 ]
    fe_memory_size:
      type: string
      description: ram memory required for the server instance
      default: 16 GB
      constraints:
      - valid_values: [ 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB, 2 GB, 4 GB, 8 GB]
    wn_number_cpus:
      type: integer
      description: number of cpus required for the WN instances
      default: 8
      constraints:
      - valid_values: [ 8, 16, 32, 64, 1, 2, 4 ]
    wn_memory_size:
      type: string
      description: ram memory required for the WN instances
      default: 16 GB
      constraints:
      - valid_values: [ 16 GB, 32 GB, 64 GB, 128 GB, 256 GB, 512 GB, 2 GB, 4 GB, 8 GB ]
    num_of_io_nodes:
      type: integer
      description: number of ophidia oi nodes to launch
      default: 1

    storage_size:
      type: scalar-unit.size
      description: Size of the extra HD added to the instance (Set 0 if disk is not needed)
      default: 0 GB
      constraints:
      - valid_values: [ 0 GB, 20 GB, 30 GB, 50 GB, 100 GB, 1 TB, 10 TB, 100 TB ]
    volume_id:
      type: string
      description: "Or URL of the disk to be attached to the instance (format: ost://bulut.truba.gov.tr//<vol_id>"
      default: "ost://bulut.truba.gov.tr/fab4da5e-0613-4cc3-8152-0e4cbca08a3c"

  node_templates:

    ophidiafe:
      type: tosca.nodes.indigo.OphidiaServer
      properties:
        io_ips: { get_attribute: [ ophidiaio, private_address ] }
      requirements:
        - host: ophidiaserver

    ophidiaserver:
      type: tosca.nodes.indigo.Compute
      capabilities:
        endpoint:
          properties:
            dns_name: slurmserver
            network_name: PUBLIC
            ports:
              ssh_port:
                protocol: tcp
                source: 22
              ophidia_port:
                protocol: tcp
                source: 11732
              data_port:
                protocol: tcp
                source: 8080
              jupyter_port:
                protocol: tcp
                source: 443
        host:
         properties:
           num_cpus: { get_input: fe_number_cpus }
           mem_size: { get_input: fe_memory_size }
        os:
          properties:
            distribution: centos
            version: 7
            type: linux
      requirements:
        - local_storage:
            node: ophidia_server_block_storage
            capability: tosca.capabilities.Attachment
            relationship:
              type: tosca.relationships.AttachesTo
              properties:
                location: /data

    ophidia_server_block_storage:
      type: tosca.nodes.BlockStorage
      properties:
        size: { get_input: storage_size }
        volume_id: { get_input: volume_id }

    ophidia_io:
      type: tosca.nodes.indigo.OphidiaIO
      properties:
        server_ip: { get_attribute: [ ophidiaserver, private_address, 0 ] }
        server_public_ip: { get_attribute: [ ophidiaserver, public_address, 0 ] }
      requirements:
        - host: ophidiaio

    ophidiaio:
      type: tosca.nodes.indigo.Compute
      capabilities:
        scalable:
          properties:
            count: { get_input: num_of_io_nodes }
        endpoint:
          properties:
            network_name: PRIVATE
        host:
         properties:
           num_cpus: { get_input: wn_number_cpus }
           mem_size: { get_input: wn_memory_size }
        os:
          properties:
            distribution: centos
            version: 7
            type: linux

  outputs:
    instance_ip:
      value: { get_attribute: [ ophidiaserver, public_address, 0 ] }
    instance_creds:
      value: { get_attribute: [ ophidiaserver, endpoint, credential, 0 ] }
