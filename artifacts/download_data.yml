---
- hosts: localhost
  connection: local
  vars:
    poll_time: 5
    max_time: "{{ max_download_time | default(1800) }}"
    pvc_name: "{{ k8s_pvc_name | default('') }}"
    pvc_namespace: "{{ k8s_pvc_namespace | default('') }}"
    unarchive: "{{ unarchive_file | default(false) }}"
  tasks:
  - name: Download data to a local path
    block:

    - name: Create "{{ local_path }}" if needed
      file: 
        path: "{{ local_path }}"
        state: directory
        recurse: yes

    - set_fact:
        poll_time: 0
      when: wait_to_download | bool

    - name: Download "{{ data_url }}" on "{{ local_path }}"
      get_url: 
        url: "{{ data_url }}"
        dest: "{{ local_path }}"
      async: "{{ max_time }}"
      poll: "{{ poll_time }}"
      when: not unarchive

    - name: Unarchive "{{ data_url }}" on "{{ local_path }}"
      unarchive:
        src: "{{ data_url }}"
        dest: "{{ local_path }}"
        remote_src: yes
      when: unarchive

    when: data_url != '' and pvc_name == '' or pvc_namespace == ''

  - name: Download data to a K8s PVC
    block:

    - name: Gen URL hash
      set_fact:
        url_hash: "{{ data_url | hash('md5') }}"

    - name: Set Download and Unarchive job command
      set_fact:
        command: apk add 7zip && wget -P /data '{{ data_url }}' && 7z x /data/{{ data_url | basename }} -o/data && rm -rf /data/{{ data_url | basename }}
      when: unarchive

    - name: Set Download job command
      set_fact:
        command: wget -P /data '{{ data_url }}'
      when: not unarchive

    - name: Create job file
      copy:
        content: |
          apiVersion: batch/v1
          kind: Job
          metadata:
            namespace: {{ pvc_namespace }}
            name: pv-load-{{ url_hash }}
          spec:
            template:
              spec:
                restartPolicy: OnFailure
                volumes:
                  - name: pv-storage
                    persistentVolumeClaim:
                      claimName: {{ pvc_name }}
                containers:
                  - name: pv-load
                    image: alpine
                    command:
                    - sh
                    - -c
                    - {{ command }}
                    volumeMounts:
                      - mountPath: '/data'
                        name: pv-storage
        dest: "/opt/wget_job_{{ url_hash }}.yaml"
      register: job_file

    - name: Create wget job
      command: kubectl apply -f /opt/wget_job_{{ url_hash }}.yaml
      environment:
        KUBECONFIG: "/etc/kubernetes/admin.conf"
      when: job_file is changed

    when: data_url != '' and pvc_name != '' and pvc_namespace != ''
