tosca_definitions_version: tosca_simple_yaml_1_0

imports:
  - grycap_custom_types: https://raw.githubusercontent.com/grycap/tosca/main/custom_types.yaml

description: TOSCA template for launching Daskhub on top of a Kubernetes Virtual Cluster.

metadata:
  version: "1.0.0"
  name: Daskhub
  display_name: Launch Daskhub on top of a Kubernetes Virtual Cluster
  icon: images/dask.png
  parents:
    - kubernetes.yaml

topology_template:

  inputs:

    dask_password:
      type: string
      description: Password for the Simple auth method in the Gateway
      default: dask_pass
    dask_version:
      type: string
      description: Daskhub version
      default: 2022.5.0
      constraints:
      - valid_values: [ "2022.5.0", "2022.4.1", "2022.3.0", "2022.2.1" ]
    jupyterhub_token:
      type: string
      description: Jupyterhub auth token
      default: 11a8120f55c6992d819b9b33ef825120d9a752f738fca1d659c06b436053cd02
    jupyterhub_image_name:
      type: string
      description: Jupyterhub singleuser image
      default: 'pangeo/pangeo-notebook:latest'

  node_templates:

    dask:
      type: tosca.nodes.indigo.Helm.Chart
      properties:
        namespace: daskhub
        repository_name: dask
        repository_url: "https://helm.dask.org"
        name: daskhub
        values_file: |
          rbac:
            enabled: true  # Create and use roles and service accounts on an RBAC-enabled cluster.
          jupyterhub:
            proxy:
              # run only on master nodes
              chp:
                  nodeSelector:
                        node-role.kubernetes.io/control-plane: ''
                  tolerations:
                      - key: 'node-role.kubernetes.io/control-plane'
                        operator: Exists
            hub:
              # run only on master nodes
              nodeSelector:
                     node-role.kubernetes.io/control-plane: ''
              tolerations:
                  - key: ' node-role.kubernetes.io/control-plane'
                    operator: Exists
              services:
                dask-gateway:
                  apiToken: bdd355fa21a11309d4c78bb0ad4c7358a282d2756b692b0b3bb4ed242317e45d
              extraConfig:
                # Register Dask Gateway service and setup singleuser environment.
                00-add-dask-gateway-values: |
                  # 1. Sets `DASK_GATEWAY__PROXY_ADDRESS` in the singleuser environment.
                  # 2. Adds the URL for the Dask Gateway JupyterHub service.
                  import os
                  # These are set by jupyterhub.
                  release_name = os.environ['HELM_RELEASE_NAME']
                  release_namespace = os.environ['POD_NAMESPACE']
                  if 'PROXY_HTTP_SERVICE_HOST' in os.environ:
                      # https is enabled, we want to use the internal http service.
                      gateway_address = 'http://{}:{}/services/dask-gateway/'.format(
                          os.environ['PROXY_HTTP_SERVICE_HOST'],
                          os.environ['PROXY_HTTP_SERVICE_PORT'],
                      )
                      print('Setting DASK_GATEWAY__ADDRESS {} from HTTP service'.format(gateway_address))
                  else:
                      gateway_address = 'http://proxy-public/services/dask-gateway'
                      print('Setting DASK_GATEWAY__ADDRESS {}'.format(gateway_address))
                  # Internal address to connect to the Dask Gateway.
                  c.KubeSpawner.environment.setdefault('DASK_GATEWAY__ADDRESS', gateway_address)
                  # Internal address for the Dask Gateway proxy.
                  c.KubeSpawner.environment.setdefault('DASK_GATEWAY__PROXY_ADDRESS', 'gateway://traefik-{}-dask-gateway.{}:80'.format(release_name, release_namespace))
                  # Relative address for the dashboard link.
                  c.KubeSpawner.environment.setdefault('DASK_GATEWAY__PUBLIC_ADDRESS', '/services/dask-gateway/')
                  # Use JupyterHub to authenticate with Dask Gateway.
                  c.KubeSpawner.environment.setdefault('DASK_GATEWAY__AUTH__TYPE', 'jupyterhub')
                  # Adds Dask Gateway as a JupyterHub service to make the gateway available at
                  # {HUB_URL}/services/dask-gateway
                  service_url = 'http://traefik-{}-dask-gateway.{}'.format(release_name, release_namespace)
                  for service in c.JupyterHub.services:
                      if service['name'] == 'dask-gateway':
                          if not service.get('url', None):
                              print('Adding dask-gateway service URL')
                              service.setdefault('url', service_url)
                          break
                  else:
                      print('dask-gateway service not found. Did you set jupyterhub.hub.services.dask-gateway.apiToken?')
                01-optionHandler: |
                  # Configure options to
                  # 1. Have the default worker image match the singleuser image
                  # 2. Place bounds on worker CPU and Memory requests
                  # 3. Accept a mapping of environment variables to pass to workers.
                  from dask_gateway_server.options import Options, Float, String, Mapping
                  def cluster_options(user):
                      def option_handler(options):
                          if ':' not in options.image:
                              raise ValueError('When specifying an image you must also provide a tag')
                          return {
                              'worker_cores': 0.88 * min(options.worker_cores / 2, 1),
                              'worker_cores_limit': options.worker_cores,
                              'worker_memory': '%fG' % (0.9 * options.worker_memory),
                              'worker_memory_limit': '%fG' % options.worker_memory,
                              'image': options.image,
                              'environment': options.environment,
                          }
                      return Options(
                          Float('worker_cores', 1, min=1, max=16, label='Worker Cores'),
                          Float('worker_memory', 8, min=8, max=128, label='Worker Memory (GiB)'),
                          String('image', default='pangeo/pangeo-notebook:latest', label='Image'),
                          Mapping('environment', {}, label='Environment Variables'),
                          handler=option_handler,
                      )
                  c.Backend.cluster_options = cluster_options
            singleuser:
              extraEnv:
                DASK_GATEWAY__CLUSTER__OPTIONS__IMAGE: '{JUPYTER_IMAGE_SPEC}'
              defaultUrl: '/lab'  # Use jupyterlab by defualt.
              memory:
                guarantee: 2G
                limit: 4G
              cpu:
                guarantee: 1
                limit: 2
              storage:
                type: dynamic
                capacity: 2Gi
              # default is 300s, sometimes Jetstream volumes are slow to attach
              startTimeout: 600
              # See https://github.com/zonca/jupyterhub-deploy-kubernetes-jetstream/issues/38
              lifecycleHooks:
                postStart:
                  exec:
                    command:
                      - 'sh'
                      - '-c'
                      - >
                        chmod 700 .ssh;
                        chmod g-s .ssh;
                        chmod 600 .ssh/*;
                        exit 0
            ingress:
              enabled: true
              annotations:
                kubernetes.io/ingress.class: 'nginx'
          dask-gateway:
            enabled: true  # Enabling dask-gateway will install Dask Gateway as a dependency.
            # Futher Dask Gateway configuration goes here
            # See https://github.com/dask/dask-gateway/blob/master/resources/helm/dask-gateway/values.yaml
            gateway:
              prefix: '/services/dask-gateway'  # Users connect to the Gateway through the JupyterHub service.
              auth:
                type: jupyterhub  # Use JupyterHub to authenticate with Dask Gateway
              extraConfig:
                dasklimits: |
                  c.ClusterConfig.cluster_max_cores = 6
                  c.ClusterConfig.cluster_max_memory = "24 G"
                  c.ClusterConfig.cluster_max_workers = 3
              backend:
                worker:
                  cores:
                    limit: 2
                  memory:
                    limit: 8G
                  threads: 2
            traefik:
              service:
                type: ClusterIP  # Access Dask Gateway through JupyterHub. To access the Gateway from outside JupyterHub, this must be changed to a `LoadBalancer`.
          dask-kubernetes:
            # Use dask-kubernetes, rather than Dask Gateway, for creating Dask Clusters.
            # Enabling this also requires
            # 1. Setting `jupyterhub.singleuser.serviceAccountName: daskkubernetes`.
            # 2. Ensuring that `dask-kubernetes` is in your singleuser environment.
            enabled: false
        values: 
          jupyterhub.singleuser.image.name: { get_input: jupyterhub_image_name }
          jupyterhub.singleuser.image.tag: latest
          #jupyterhub.proxy.secretToken: { get_input: jupyterhub_token }
          dask-gateway.gateway.auth.jupyterhub.apiToken: { get_input: jupyterhub_token }
          services.dask-gateway.apiToken: { get_input: jupyterhub_token }
      requirements:
        - host: front
        - dependency: lrms_front_end

  outputs:
    pangeo_jupyter_hub_url:
      value: { concat: [ 'https://', get_attribute: [ front, public_address, 0 ], '/jupyterhub/' ] }

