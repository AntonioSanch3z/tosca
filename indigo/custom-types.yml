tosca_definitions_version: alien_dsl_1_4_0

metadata:
  template_name: indigo-types
  template_version: 1.0.0
  template_author: indigo

description: The INDIGO Custom types

imports:
  - tosca-normative-types:1.0.0-ALIEN14

data_types:

  tosca.datatypes.Root:
    description: >
      The TOSCA root Data Type all other TOSCA base Data Types derive from

  tosca.datatypes.network.PortDef:
    derived_from: tosca.datatypes.Root
    type: integer
    constraints:
      - in_range: [ 1, 65535 ]

  tosca.datatypes.network.PortSpec:
    derived_from: tosca.datatypes.Root
    properties:
      protocol:
        type: string
        required: true
        default: tcp
        constraints:
          - valid_values: [ udp, tcp, igmp ]
      target:
        type: tosca.datatypes.network.PortDef
        required: false
      target_range:
        type: range
        required: false
        constraints:
          - in_range: [ 1, 65535 ]
      source:
        type: tosca.datatypes.network.PortDef
        required: false
      source_range:
        type: range
        required: false
        constraints:
          - in_range: [ 1, 65535 ]

artifact_types:

  tosca.artifacts.Implementation.YAML:
    derived_from: tosca.artifacts.Implementation
    description: YAML Ansible recipe artifact
    mime_type: text/yaml
    file_ext: [ yaml, yml ]

  tosca.artifacts.AnsibleGalaxy.role:
    derived_from: tosca.artifacts.Root
    description: Ansible Galaxy role to be deployed in the target node

capability_types:

  tosca.capabilities.indigo.OperatingSystem:
    derived_from: tosca.capabilities.OperatingSystem
    properties:
      gpu:
        type: boolean
        required: no
      image:
        type: string
        required: no
      credential:
        type: tosca.datatypes.Credential
        required: no

  tosca.capabilities.indigo.Scalable:
    derived_from: tosca.capabilities.Scalable
    properties:
      min_instances:
        type: integer
        default: 1
        required: no
      max_instances:
        type: integer
        default: 1
        required: no
      count:
        type: integer
        description: the number of resources
        required: no
        default: 1
      removal_list:
        type: list
        description: list of IDs of the resources to be removed
        required: no
        entry_schema:
          type: string

  tosca.capabilities.indigo.Container:
    derived_from: tosca.capabilities.Container
    properties:
      instance_type:
        type: string
        required: no

  tosca.capabilities.indigo.LRMS:
    derived_from: tosca.capabilities.Container
    properties:
      type:
        type: string
        required: true
        constraints:
        - valid_values: [ local, torque, slurm, sge, condor, mesos ]

  tosca.capabilities.indigo.LRMS.Torque:
    derived_from: tosca.capabilities.indigo.LRMS
    properties:
      type:
        type: string
        required: true
        default: torque
        constraints:
          - equal: torque

  tosca.capabilities.indigo.LRMS.Slurm:
    derived_from: tosca.capabilities.indigo.LRMS
    properties:
      type:
        type: string
        required: true
        default: slurm
        constraints:
          - equal: slurm

  tosca.capabilities.indigo.LRMS.Local:
    derived_from: tosca.capabilities.indigo.LRMS
    properties:
      type:
        type: string
        required: true
        default: local
        constraints:
          - equal: local

  tosca.capabilities.indigo.LRMS.Mesos:
    derived_from: tosca.capabilities.indigo.LRMS
    properties:
      type:
        type: string
        required: true
        default: mesos
        constraints:
          - equal: mesos

  tosca.capabilities.indigo.MesosMaster:        
    derived_from: tosca.capabilities.Container

  tosca.capabilities.indigo.MesosSlave:
    derived_from: tosca.capabilities.Container

  tosca.capabilities.Container.Docker:
    derived_from: tosca.capabilities.Container
    properties:
      version:
        type: list
        required: false
        entry_schema:
          type: version
        description: >
          The Docker version capability.
      publish_all:
        type: boolean
        default: false
        required: false
        description: >
          Indicates that all ports (ranges) listed in the dockerfile
          using the EXPOSE keyword be published.
      publish_ports:
        type: list
        entry_schema:
          type: tosca.datatypes.network.PortSpec
        required: false
        description: >
          List of ports mappings from source (Docker container)
          to target (host) ports to publish.
      expose_ports:
        type: list
        entry_schema:
          type: tosca.datatypes.network.PortSpec
        required: false
        description: >
          List of ports mappings from source (Docker container) to expose
          to other Docker containers (not accessible outside host).
      volumes:
        type: list
        entry_schema:
          type: string
        required: false
        description: >
          The dockerfile VOLUME command which is used to enable access
          from the Docker container to a directory on the host machine.
      host_id:
        type: string
        required: false
        description: >
            The optional identifier of an existing host resource
            that should be used to run this container on.
      volume_id:
        type: string
        required: false
        description: >
          The optional identifier of an existing storage volume (resource)
          that should be used to create the container's mount point(s) on.

  tosca.capabilities.indigo.Container.Docker:
    derived_from: tosca.capabilities.Container.Docker
    properties:
      num_cpus:
        type: float
        required: false
        constraints:
          - greater_or_equal: 0.0

  tosca.capabilities.indigo.Endpoint:
    derived_from: tosca.capabilities.Endpoint
    properties:
      dns_name:
        description: The optional name to register with DNS
        type: string
        required: false
      private_ip:
        description: Flag used to specify that this endpoint will require also a private IP although it is a public one.
        type: boolean
        required: false
        default: true
    attributes:
      credential:
        type: list
        entry_schema:
          type: tosca.datatypes.Credential

  tosca.capabilities.indigo.Container.Application.Docker.Chronos:
    derived_from: tosca.capabilities.Root

relationship_types:

  tosca.relationships.indigo.Manages:
    derived_from: tosca.relationships.Root

node_types:

  tosca.nodes.indigo.Compute:
    derived_from: tosca.nodes.Compute
    description: >
      The INDIGO Compute node
    metadata:
      icon: /images/compute.png
    attributes:
      private_address:
        description: List of private IP addresses
        type: list
        entry_schema:
          type: string
      public_address:
        description: List of public IP addresses
        type: list
        entry_schema:
          type: string
      ctxt_log:
        description: Contextualization log
        type: string
    capabilities:
      scalable:
        type: tosca.capabilities.indigo.Scalable
      os:
         type: tosca.capabilities.indigo.OperatingSystem
      endpoint:
        type: tosca.capabilities.indigo.Endpoint
      host:
        type: tosca.capabilities.indigo.Container
        valid_source_types: [tosca.nodes.SoftwareComponent]

  tosca.nodes.indigo.OphidiaServer:
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      icon: /images/ophidia-server.png
    properties:
      io_ips:
        type: list
        entry_schema:
          type: string
        description: List of IPs of the Ophidia IO nodes
        required: false
        default: []
    artifacts:
      - ophidia_role:
          file: indigo-dc.ophidia-cluster
          type: tosca.artifacts.AnsibleGalaxy.role
      - slurm_role:
          file: indigo-dc.slurm
          type: tosca.artifacts.AnsibleGalaxy.role
      - nfs_role:
          file: indigo-dc.nfs
          type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ophidia/ophidia_server_install.yml
          inputs:
            ophidia_io_ips: { get_property: [ SELF, io_ips ] }

  tosca.nodes.indigo.OphidiaIO:
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      icon: /images/ophidia-io.png
    properties:
      server_ip:
        type: string
        description: IP of the OphidiaServer node
        required: true
    artifacts:
      - ophidia_role:
          file: indigo-dc.ophidia-cluster
          type: tosca.artifacts.AnsibleGalaxy.role
      - slurm_role:
          file: indigo-dc.slurm
          type: tosca.artifacts.AnsibleGalaxy.role
      - nfs_role:
          file: indigo-dc.nfs
          type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ophidia/ophidia_io_install.yml
          inputs:
            ophidia_server_ip: { get_property: [ SELF, server_ip ] }

  tosca.nodes.indigo.HaddockApp:
    derived_from: tosca.nodes.SoftwareComponent
    properties:
      haddock_app_name:
        type: string
        description: Haddocking application
        required: true
        constraints:
        - valid_values: [ disvis, powerfit ]
    artifacts:
      - galaxy_role:
          file: indigo-dc.disvis-powerfit
          type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/haddock/haddock_install.yml
          inputs:
            haddock_app_name: { get_property: [ SELF, haddock_app_name ] }

  tosca.nodes.indigo.Disvis:
    derived_from: tosca.nodes.indigo.HaddockApp
    properties:
      haddock_app_name:
        type: string
        required: true
        default: disvis
        constraints:
          - equal: disvis

  tosca.nodes.indigo.Powerfit:
    derived_from: tosca.nodes.indigo.HaddockApp
    properties:
      haddock_app_name:
        type: string
        required: true
        default: powerfit
        constraints:
          - equal: powerfit

  tosca.nodes.indigo.Eubiosteo:
    derived_from: tosca.nodes.SoftwareComponent
    artifacts:
      - galaxy_role:
          file: indigo-dc.eubiosteo
          type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/eubiosteo/eubiosteo_install.yml

  tosca.nodes.indigo.Ambertools:
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      icon: /images/amber.jpg
    artifacts:
      - galaxy_role:
          file: indigo-dc.ambertools
          type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/ambertools/ambertools_install.yml

  tosca.nodes.indigo.Kepler:
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      icon: /images/kepler.jpeg
    artifacts:
      - galaxy_role:
          file: indigo-dc.kepler
          type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/kepler/kepler_install.yml

  tosca.nodes.indigo.HadoopMaster:
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      icon: /images/hadoop-master.jpg
    artifacts:
      - hadoop_role:
          file: indigo-dc.hadoop
          type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/hadoop/hadoop_master_install.yml
          inputs:
            hadoop_master_ip: { get_attribute: [ HOST, private_address, 0 ] }

  tosca.nodes.indigo.HadoopSlave:
    derived_from: tosca.nodes.SoftwareComponent
    metadata:
      icon: /images/hadoop-wn.jpg
    properties:
      master_ip:
        required: yes
        type: string
    artifacts:
      - hadoop_role:
          file: indigo-dc.hadoop
          type: tosca.artifacts.AnsibleGalaxy.role
    interfaces:
      Standard:
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/hadoop/hadoop_wn_install.yml
          inputs:
            hadoop_master_ip: { get_property: [ SELF, master_ip ] }

  tosca.nodes.indigo.OneDataStorage:
    derived_from: tosca.nodes.BlockStorage
    metadata:
      icon: /images/onedata.png
    properties:
      size:
        # to overwrite BlockStorage size property to set it as not required
        type: scalar-unit.size
        required: false
      oneprovider_host:
        type: list
        entry_schema:
          type: string
        required: false
      onezone_endpoint:
        type: string
        required: false
      dataspace:
        type: list
        entry_schema:
          type: string
        required: false
      credential:
        type: tosca.datatypes.Credential
        required: true


  tosca.nodes.Database.MySQL:
    derived_from: tosca.nodes.Database
    requirements:
      - host:
          capability: tosca.capabilities.Container
          relationship: tosca.relationships.HostedOn
          node: tosca.nodes.DBMS.MySQL
    interfaces:
      Standard:
        create:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_db_configure.yml
          inputs:
            db_password: { get_property: [ SELF, password ] }
            db_name: { get_property: [ SELF, name ] }
            db_user: { get_property: [ SELF, user ] }
            db_root_password: ""
            db_access_host: "%"

  tosca.nodes.DBMS.MySQL:
    derived_from: tosca.nodes.DBMS
    properties:
      port:
        type: integer
        description: reflect the default MySQL server port
        default: 3306
      root_password:
        type: string
        # MySQL requires a root_password for configuration
        required: true
    capabilities:
      # Further constrain the ‘host’ capability to only allow MySQL databases
      host:
        type: tosca.capabilities.Container
        valid_source_types: [ tosca.nodes.Database.MySQL ]
    interfaces:
      Standard:
        create: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_install.yml
        configure:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_configure.yml
          inputs:
            root_password: { get_property: [ SELF, root_password ] }
            port: { get_property: [ SELF, port ] }

  tosca.nodes.WebServer.Apache:
    derived_from: tosca.nodes.WebServer
    interfaces:
      Standard:
        create:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/apache/apache_install.yml
        start:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/apache/apache_start.yml

# INDIGO non normative types

  tosca.nodes.indigo.Database.MySQL:
    derived_from: tosca.nodes.Database.MySQL
    properties:
      access_host:
        type: string
        required: no
        default: "%"
      root_password:
        type: string
        required: true
    requirements:
      - host:
          capability: tosca.capabilities.Container
          relationship: tosca.relationships.HostedOn
          node: tosca.nodes.DBMS.MySQL
    interfaces:
      Standard:
        create:
          implementation: https://raw.githubusercontent.com/indigo-dc/tosca-types/master/artifacts/mysql/mysql_db_configure.yml
          inputs:
            db_password: { get_property: [ SELF, password ] }
            db_name: { get_property: [ SELF, name ] }
            db_user: { get_property: [ SELF, user ] }
            db_root_password: { get_property: [ SELF, root_password ] }
            db_access_host: { get_property: [ SELF, access_host ] }